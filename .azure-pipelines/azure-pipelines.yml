# Azure DevOps CI/CD Pipeline for S.C.O.U.T. Platform
# Production-ready pipeline with comprehensive testing, security, and deployment

trigger:
  branches:
    include:
    - main
    - release/*
    - hotfix/*
  paths:
    include:
    - backend/*
    - infrastructure/*
    - .azure-pipelines/*
    exclude:
    - docs/*
    - README.md
    - frontend/*

pr:
  branches:
    include:
    - main
    - develop
  paths:
    include:
    - backend/*
    - infrastructure/*

variables:
  # Azure Configuration
  azureSubscription: 'Scout-Platform-Production'
  resourceGroupName: 'scout-platform-rg'
  containerRegistry: 'scoutplatform.azurecr.io'
  aksClusterName: 'scout-platform-aks'
  
  # Application Configuration
  imageName: 'scout-backend'
  imageTag: '$(Build.BuildId)'
  kubernetesNamespace: 'scout-platform'
  
  # Security Configuration
  sonarQubeProjectKey: 'scout-platform-backend'
  trivyVersion: '0.47.0'
  
  # Build Configuration
  pythonVersion: '3.11'
  nodeVersion: '18.x'
  
pool:
  vmImage: 'ubuntu-latest'

stages:
# ============================================================================
# STAGE 1: Code Quality & Security Analysis
# ============================================================================
- stage: CodeQuality
  displayName: 'Code Quality & Security'
  jobs:
  - job: StaticAnalysis
    displayName: 'Static Code Analysis'
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(pythonVersion)'
        displayName: 'Use Python $(pythonVersion)'
    
    - script: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
        pip install flake8 black isort mypy bandit safety
      displayName: 'Install dependencies and analysis tools'
    
    # Code formatting check
    - script: |
        cd backend
        black --check --diff .
      displayName: 'Check code formatting with Black'
      continueOnError: true
    
    # Import sorting check
    - script: |
        cd backend
        isort --check-only --diff .
      displayName: 'Check import sorting with isort'
      continueOnError: true
    
    # Linting
    - script: |
        cd backend
        flake8 app/ --max-line-length=88 --extend-ignore=E203,W503
      displayName: 'Lint code with flake8'
      continueOnError: true
    
    # Type checking
    - script: |
        cd backend
        mypy app/ --ignore-missing-imports
      displayName: 'Type checking with mypy'
      continueOnError: true
    
    # Security analysis
    - script: |
        cd backend
        bandit -r app/ -f json -o bandit-report.json
      displayName: 'Security analysis with Bandit'
      continueOnError: true
    
    # Dependency vulnerability scan
    - script: |
        cd backend
        safety check --json --output safety-report.json
      displayName: 'Dependency vulnerability scan'
      continueOnError: true
    
    # Publish security reports
    - task: PublishTestResults@2
      inputs:
        testResultsFiles: 'backend/*-report.json'
        testRunTitle: 'Security Analysis Results'
      condition: always()

# ============================================================================
# STAGE 2: Unit Testing & Coverage
# ============================================================================
- stage: Testing
  displayName: 'Unit Testing & Coverage'
  dependsOn: CodeQuality
  condition: succeeded()
  jobs:
  - job: UnitTests
    displayName: 'Unit Tests & Coverage'
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_scout_platform
        ports:
        - 5432:5432
      redis:
        image: redis:7-alpine
        ports:
        - 6379:6379
    
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(pythonVersion)'
        displayName: 'Use Python $(pythonVersion)'
    
    - script: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
        pip install pytest pytest-cov pytest-asyncio pytest-mock
      displayName: 'Install dependencies and test packages'
    
    # Wait for services
    - script: |
        timeout 30 bash -c 'until nc -z localhost 5432; do sleep 1; done'
        timeout 30 bash -c 'until nc -z localhost 6379; do sleep 1; done'
      displayName: 'Wait for services to be ready'
    
    # Run unit tests with coverage
    - script: |
        cd backend
        export DATABASE_URL="postgresql://test_user:test_password@localhost:5432/test_scout_platform"
        export REDIS_URL="redis://localhost:6379/0"
        export SECRET_KEY="test-secret-key-for-ci"
        export TESTING=true
        
        pytest tests/ \
          --cov=app \
          --cov-report=html \
          --cov-report=xml \
          --cov-report=term-missing \
          --cov-fail-under=80 \
          --junitxml=test-results.xml \
          -v
      displayName: 'Run unit tests with coverage'
    
    # Publish test results
    - task: PublishTestResults@2
      inputs:
        testResultsFiles: 'backend/test-results.xml'
        testRunTitle: 'Unit Test Results'
      condition: always()
    
    # Publish coverage results
    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: 'backend/coverage.xml'
        reportDirectory: 'backend/htmlcov'
      condition: always()

# ============================================================================
# STAGE 3: Build & Container Security
# ============================================================================
- stage: Build
  displayName: 'Build & Container Security'
  dependsOn: Testing
  condition: succeeded()
  jobs:
  - job: DockerBuild
    displayName: 'Docker Build & Security Scan'
    steps:
    # Docker build
    - task: Docker@2
      displayName: 'Build Docker image'
      inputs:
        containerRegistry: 'scout-platform-acr'
        repository: '$(imageName)'
        command: 'build'
        Dockerfile: 'backend/Dockerfile'
        buildContext: 'backend'
        tags: |
          $(imageTag)
          latest
        arguments: '--label "git.commit=$(Build.SourceVersion)" --label "build.number=$(Build.BuildId)"'
    
    # Container vulnerability scanning with Trivy
    - script: |
        sudo apt-get update
        sudo apt-get install wget apt-transport-https gnupg lsb-release
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update
        sudo apt-get install trivy
      displayName: 'Install Trivy'
    
    - script: |
        trivy image --format json --output trivy-report.json $(imageName):$(imageTag)
        trivy image --severity HIGH,CRITICAL --exit-code 1 $(imageName):$(imageTag)
      displayName: 'Container vulnerability scan'
      continueOnError: true
    
    # Publish security scan results
    - task: PublishTestResults@2
      inputs:
        testResultsFiles: 'trivy-report.json'
        testRunTitle: 'Container Security Scan'
      condition: always()
    
    # Push to container registry
    - task: Docker@2
      displayName: 'Push Docker image'
      inputs:
        containerRegistry: 'scout-platform-acr'
        repository: '$(imageName)'
        command: 'push'
        tags: |
          $(imageTag)
          latest
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))

# ============================================================================
# STAGE 4: Infrastructure Validation
# ============================================================================
- stage: InfrastructureValidation
  displayName: 'Infrastructure Validation'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - job: TerraformValidation
    displayName: 'Terraform Validation'
    steps:
    # Install Terraform
    - task: TerraformInstaller@0
      inputs:
        terraformVersion: 'latest'
    
    # Terraform format check
    - script: |
        cd infrastructure/terraform
        terraform fmt -check -recursive
      displayName: 'Terraform format check'
    
    # Terraform validation
    - script: |
        cd infrastructure/terraform
        terraform init -backend=false
        terraform validate
      displayName: 'Terraform validate'
    
    # Security scan for Terraform
    - script: |
        # Install checkov
        pip install checkov
        cd infrastructure/terraform
        checkov -f . --framework terraform --output json --output-file checkov-report.json
      displayName: 'Terraform security scan'
      continueOnError: true
  
  - job: KubernetesValidation
    displayName: 'Kubernetes Validation'
    steps:
    # Install kubeval
    - script: |
        wget https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz
        tar xf kubeval-linux-amd64.tar.gz
        sudo mv kubeval /usr/local/bin
      displayName: 'Install kubeval'
    
    # Validate Kubernetes manifests
    - script: |
        cd infrastructure/kubernetes
        kubeval *.yaml
      displayName: 'Validate Kubernetes manifests'
    
    # Lint Kubernetes manifests
    - script: |
        # Install kube-score
        kubectl version --client
        wget https://github.com/zegl/kube-score/releases/download/v1.16.1/kube-score_1.16.1_linux_amd64.tar.gz
        tar xf kube-score_1.16.1_linux_amd64.tar.gz
        sudo mv kube-score /usr/local/bin
        
        cd infrastructure/kubernetes
        kube-score score *.yaml
      displayName: 'Lint Kubernetes manifests'
      continueOnError: true

# ============================================================================
# STAGE 5: Staging Deployment
# ============================================================================
- stage: StagingDeployment
  displayName: 'Staging Deployment'
  dependsOn: InfrastructureValidation
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
  - deployment: DeployToStaging
    displayName: 'Deploy to Staging'
    environment: 'staging'
    strategy:
      runOnce:
        deploy:
          steps:
          # Download artifacts
          - download: current
            artifact: 'manifests'
          
          # Deploy to AKS staging
          - task: KubernetesManifest@0
            displayName: 'Deploy to staging'
            inputs:
              action: 'deploy'
              kubernetesServiceConnection: 'scout-platform-aks-staging'
              namespace: '$(kubernetesNamespace)-staging'
              manifests: |
                $(Pipeline.Workspace)/manifests/config.yaml
                $(Pipeline.Workspace)/manifests/backend-deployment.yaml
              containers: '$(containerRegistry)/$(imageName):$(imageTag)'
          
          # Wait for deployment
          - task: KubernetesManifest@0
            displayName: 'Wait for deployment'
            inputs:
              action: 'deploy'
              kubernetesServiceConnection: 'scout-platform-aks-staging'
              namespace: '$(kubernetesNamespace)-staging'
              manifests: |
                $(Pipeline.Workspace)/manifests/backend-deployment.yaml
              rolloutStatusTimeout: '600'

# ============================================================================
# STAGE 6: Integration Testing
# ============================================================================
- stage: IntegrationTesting
  displayName: 'Integration Testing'
  dependsOn: StagingDeployment
  condition: succeeded()
  jobs:
  - job: APITesting
    displayName: 'API Integration Testing'
    steps:
    # Install Node.js for Newman (Postman CLI)
    - task: NodeTool@0
      inputs:
        versionSpec: '$(nodeVersion)'
      displayName: 'Install Node.js'
    
    # Install Newman and dependencies
    - script: |
        npm install -g newman newman-reporter-htmlextra
      displayName: 'Install Newman'
    
    # Run API tests
    - script: |
        newman run tests/postman/scout-platform-api.postman_collection.json \
          --environment tests/postman/staging.postman_environment.json \
          --reporters cli,htmlextra \
          --reporter-htmlextra-export newman-report.html \
          --reporter-htmlextra-darkTheme
      displayName: 'Run API integration tests'
      continueOnError: true
    
    # Publish API test results
    - task: PublishHtmlReport@1
      inputs:
        reportDir: 'newman-report.html'
        tabName: 'API Test Results'
      condition: always()

# ============================================================================
# STAGE 7: Production Deployment
# ============================================================================
- stage: ProductionDeployment
  displayName: 'Production Deployment'
  dependsOn: IntegrationTesting
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
  - deployment: DeployToProduction
    displayName: 'Deploy to Production'
    environment: 'production'
    strategy:
      canary:
        increments: [25, 50, 100]
        deploy:
          steps:
          # Blue-Green deployment strategy
          - task: KubernetesManifest@0
            displayName: 'Deploy to production (canary)'
            inputs:
              action: 'deploy'
              kubernetesServiceConnection: 'scout-platform-aks-production'
              namespace: '$(kubernetesNamespace)'
              manifests: |
                $(Pipeline.Workspace)/manifests/config.yaml
                $(Pipeline.Workspace)/manifests/backend-deployment.yaml
              containers: '$(containerRegistry)/$(imageName):$(imageTag)'
              trafficSplitMethod: 'pod'
              percentage: $(strategy.increment)
          
          # Health check
          - script: |
            sleep 30
            curl -f https://api.scout-platform.com/api/v1/health/ready || exit 1
            displayName: 'Health check'
          
          # Performance test
          - script: |
            # Run performance tests with Artillery or similar
            echo "Running performance tests..."
            # artillery run performance-tests/load-test.yml --target https://api.scout-platform.com
            displayName: 'Performance test'
            continueOnError: true

# ============================================================================
# STAGE 8: Post-Deployment Validation
# ============================================================================
- stage: PostDeploymentValidation
  displayName: 'Post-Deployment Validation'
  dependsOn: ProductionDeployment
  condition: succeeded()
  jobs:
  - job: HealthChecks
    displayName: 'Health Checks & Monitoring'
    steps:
    # Comprehensive health checks
    - script: |
        echo "Running comprehensive health checks..."
        
        # API health check
        curl -f https://api.scout-platform.com/api/v1/health/ready
        
        # Database connectivity check
        curl -f https://api.scout-platform.com/api/v1/health/database
        
        # Redis connectivity check
        curl -f https://api.scout-platform.com/api/v1/health/redis
        
        # AI services check
        curl -f https://api.scout-platform.com/api/v1/health/ai-services
        
        echo "All health checks passed!"
      displayName: 'Production health checks'
    
    # Update monitoring dashboards
    - script: |
        echo "Updating monitoring dashboards..."
        # Update Grafana dashboards with new deployment info
        # Send deployment notification to Slack/Teams
        displayName: 'Update monitoring'
    
    # Generate deployment report
    - script: |
        echo "Generating deployment report..."
        echo "Deployment completed successfully!"
        echo "Image: $(containerRegistry)/$(imageName):$(imageTag)"
        echo "Build ID: $(Build.BuildId)"
        echo "Git Commit: $(Build.SourceVersion)"
        echo "Deployed at: $(System.DateTime)"
      displayName: 'Generate deployment report'