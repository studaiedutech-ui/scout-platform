# GitHub Actions CI/CD Workflow for S.C.O.U.T. Platform
# Production-ready workflow with comprehensive testing, security, and deployment

name: 'S.C.O.U.T. Platform CI/CD'

on:
  push:
    branches: [ main, develop, 'release/*', 'hotfix/*' ]
    paths:
      - 'backend/**'
      - 'infrastructure/**'
      - '.github/workflows/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - 'infrastructure/**'

env:
  REGISTRY: scoutplatform.azurecr.io
  IMAGE_NAME: scout-backend
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

permissions:
  contents: read
  security-events: write
  id-token: write

jobs:
  # ============================================================================
  # JOB 1: Code Quality & Security Analysis
  # ============================================================================
  code-quality:
    name: 'Code Quality & Security'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for SonarQube
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
        pip install flake8 black isort mypy bandit safety pytest-cov
    
    - name: Code formatting check (Black)
      run: |
        cd backend
        black --check --diff .
      continue-on-error: true
    
    - name: Import sorting check (isort)
      run: |
        cd backend
        isort --check-only --diff .
      continue-on-error: true
    
    - name: Lint with flake8
      run: |
        cd backend
        flake8 app/ --max-line-length=88 --extend-ignore=E203,W503 --count --statistics
      continue-on-error: true
    
    - name: Type checking with mypy
      run: |
        cd backend
        mypy app/ --ignore-missing-imports
      continue-on-error: true
    
    - name: Security analysis with Bandit
      run: |
        cd backend
        bandit -r app/ -f json -o bandit-report.json
      continue-on-error: true
    
    - name: Dependency vulnerability scan
      run: |
        cd backend
        safety check --json --output safety-report.json
      continue-on-error: true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          backend/bandit-report.json
          backend/safety-report.json

  # ============================================================================
  # JOB 2: Unit Testing & Coverage
  # ============================================================================
  unit-tests:
    name: 'Unit Tests & Coverage'
    runs-on: ubuntu-latest
    needs: code-quality
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_scout_platform
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
        pip install pytest pytest-cov pytest-asyncio pytest-mock
    
    - name: Run unit tests with coverage
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_scout_platform
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key-for-ci
        TESTING: true
      run: |
        cd backend
        pytest tests/ \
          --cov=app \
          --cov-report=html \
          --cov-report=xml \
          --cov-report=term-missing \
          --cov-fail-under=80 \
          --junitxml=test-results.xml \
          -v
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: |
          backend/test-results.xml
          backend/htmlcov/
          backend/coverage.xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: backend/coverage.xml
        flags: unittests
        name: codecov-umbrella

  # ============================================================================
  # JOB 3: Build & Container Security
  # ============================================================================
  build-and-scan:
    name: 'Build & Container Security'
    runs-on: ubuntu-latest
    needs: unit-tests
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.AZURE_CLIENT_ID }}
        password: ${{ secrets.AZURE_CLIENT_SECRET }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: backend
        file: backend/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILD_DATE=${{ github.event.head_commit.timestamp }}
          VCS_REF=${{ github.sha }}
          BUILD_VERSION=${{ github.run_number }}
    
    - name: Generate image name
      id: image
      run: echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}" >> $GITHUB_OUTPUT
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ steps.image.outputs.image }}
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Run Trivy vulnerability scanner (JSON report)
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ steps.image.outputs.image }}
        format: 'json'
        output: 'trivy-report.json'
    
    - name: Upload Trivy report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: trivy-report
        path: trivy-report.json

  # ============================================================================
  # JOB 4: Infrastructure Validation
  # ============================================================================
  infrastructure-validation:
    name: 'Infrastructure Validation'
    runs-on: ubuntu-latest
    needs: build-and-scan
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: latest
    
    - name: Terraform Format Check
      run: |
        cd infrastructure/terraform
        terraform fmt -check -recursive
    
    - name: Terraform Validation
      run: |
        cd infrastructure/terraform
        terraform init -backend=false
        terraform validate
    
    - name: Install and run Checkov
      run: |
        pip install checkov
        cd infrastructure/terraform
        checkov -f . --framework terraform --output json --output-file checkov-report.json
      continue-on-error: true
    
    - name: Install kubeval
      run: |
        wget https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz
        tar xf kubeval-linux-amd64.tar.gz
        sudo mv kubeval /usr/local/bin
    
    - name: Validate Kubernetes manifests
      run: |
        cd infrastructure/kubernetes
        kubeval *.yaml
    
    - name: Upload infrastructure reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: infrastructure-reports
        path: |
          infrastructure/terraform/checkov-report.json

  # ============================================================================
  # JOB 5: Staging Deployment
  # ============================================================================
  deploy-staging:
    name: 'Deploy to Staging'
    runs-on: ubuntu-latest
    needs: infrastructure-validation
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
    
    - name: Get AKS credentials
      run: |
        az aks get-credentials --resource-group scout-platform-rg --name scout-platform-aks-staging
    
    - name: Deploy to staging
      run: |
        # Update image tag in manifests
        sed -i 's|scoutplatform.azurecr.io/scout-backend:latest|${{ needs.build-and-scan.outputs.image }}|' infrastructure/kubernetes/backend-deployment.yaml
        
        # Apply manifests
        kubectl apply -f infrastructure/kubernetes/config.yaml -n scout-platform-staging
        kubectl apply -f infrastructure/kubernetes/backend-deployment.yaml -n scout-platform-staging
        
        # Wait for rollout
        kubectl rollout status deployment/scout-backend -n scout-platform-staging --timeout=600s
    
    - name: Staging health check
      run: |
        sleep 30
        kubectl get pods -n scout-platform-staging
        # Add specific health check for staging endpoint

  # ============================================================================
  # JOB 6: Integration Testing
  # ============================================================================
  integration-tests:
    name: 'Integration Testing'
    runs-on: ubuntu-latest
    needs: deploy-staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install Newman
      run: npm install -g newman newman-reporter-htmlextra
    
    - name: Run API tests
      run: |
        newman run tests/postman/scout-platform-api.postman_collection.json \
          --environment tests/postman/staging.postman_environment.json \
          --reporters cli,htmlextra \
          --reporter-htmlextra-export newman-report.html \
          --reporter-htmlextra-darkTheme
      continue-on-error: true
    
    - name: Upload API test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: api-test-results
        path: newman-report.html

  # ============================================================================
  # JOB 7: Production Deployment
  # ============================================================================
  deploy-production:
    name: 'Deploy to Production'
    runs-on: ubuntu-latest
    needs: integration-tests
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
    
    - name: Get AKS credentials
      run: |
        az aks get-credentials --resource-group scout-platform-rg --name scout-platform-aks
    
    - name: Deploy to production
      run: |
        # Update image tag in manifests
        sed -i 's|scoutplatform.azurecr.io/scout-backend:latest|${{ needs.build-and-scan.outputs.image }}|' infrastructure/kubernetes/backend-deployment.yaml
        
        # Apply manifests with rolling update
        kubectl apply -f infrastructure/kubernetes/config.yaml -n scout-platform
        kubectl apply -f infrastructure/kubernetes/backend-deployment.yaml -n scout-platform
        
        # Wait for rollout
        kubectl rollout status deployment/scout-backend -n scout-platform --timeout=600s
    
    - name: Production health check
      run: |
        sleep 60
        curl -f https://api.scout-platform.com/api/v1/health/ready || exit 1
        echo "Production deployment successful!"
    
    - name: Notify deployment
      if: always()
      run: |
        echo "Deployment completed!"
        echo "Image: ${{ needs.build-and-scan.outputs.image }}"
        echo "Status: ${{ job.status }}"
        # Add Slack/Teams notification here

  # ============================================================================
  # JOB 8: Post-Deployment Validation
  # ============================================================================
  post-deployment:
    name: 'Post-Deployment Validation'
    runs-on: ubuntu-latest
    needs: deploy-production
    if: always()
    
    steps:
    - name: Comprehensive health checks
      run: |
        echo "Running comprehensive health checks..."
        
        # API health check
        curl -f https://api.scout-platform.com/api/v1/health/ready
        
        # Database connectivity check
        curl -f https://api.scout-platform.com/api/v1/health/database
        
        # Redis connectivity check
        curl -f https://api.scout-platform.com/api/v1/health/redis
        
        # AI services check
        curl -f https://api.scout-platform.com/api/v1/health/ai-services
        
        echo "All health checks passed!"
    
    - name: Generate deployment summary
      run: |
        echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Image**: ${{ needs.build-and-scan.outputs.image }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Deployment Status**: ${{ needs.deploy-production.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Timestamp**: $(date -Iseconds)" >> $GITHUB_STEP_SUMMARY