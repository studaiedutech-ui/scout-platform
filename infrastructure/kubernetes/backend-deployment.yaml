# Production-ready Kubernetes deployment for S.C.O.U.T. Backend
apiVersion: apps/v1
kind: Deployment
metadata:
  name: scout-backend
  namespace: scout-platform
  labels:
    app: scout-backend
    version: v1.0.0
    component: backend
    tier: application
  annotations:
    deployment.kubernetes.io/revision: "1"
    description: "S.C.O.U.T. AI Talent Acquisition Platform Backend"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: scout-backend
  template:
    metadata:
      labels:
        app: scout-backend
        version: v1.0.0
        component: backend
        tier: application
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: scout-backend-sa
      containers:
      - name: scout-backend
        image: scoutplatform.azurecr.io/scout-backend:latest
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 8000
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        env:
        # Database Configuration
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: scout-secrets
              key: database-url
        - name: DB_HOST
          valueFrom:
            configMapKeyRef:
              name: scout-config
              key: db-host
        - name: DB_PORT
          valueFrom:
            configMapKeyRef:
              name: scout-config
              key: db-port
        
        # Redis Configuration
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: scout-secrets
              key: redis-url
        
        # AI Services
        - name: AZURE_OPENAI_API_KEY
          valueFrom:
            secretKeyRef:
              name: scout-secrets
              key: azure-openai-api-key
        - name: AZURE_OPENAI_ENDPOINT
          valueFrom:
            secretKeyRef:
              name: scout-secrets
              key: azure-openai-endpoint
        - name: PINECONE_API_KEY
          valueFrom:
            secretKeyRef:
              name: scout-secrets
              key: pinecone-api-key
        
        # Security Configuration
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: scout-secrets
              key: jwt-secret
        - name: ENCRYPTION_KEY
          valueFrom:
            secretKeyRef:
              name: scout-secrets
              key: encryption-key
        
        # Application Configuration
        - name: APP_ENV
          value: "production"
        - name: LOG_LEVEL
          value: "info"
        - name: WORKERS
          value: "4"
        - name: RUN_MIGRATIONS
          value: "false"
        
        # Monitoring Configuration
        - name: SENTRY_DSN
          valueFrom:
            secretKeyRef:
              name: scout-secrets
              key: sentry-dsn
        - name: PROMETHEUS_MULTIPROC_DIR
          value: "/tmp/prometheus"
        
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
            ephemeral-storage: "1Gi"
          limits:
            memory: "2Gi"
            cpu: "1000m"
            ephemeral-storage: "2Gi"
        
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1000
          runAsGroup: 1000
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        
        # Health checks with enhanced configuration
        livenessProbe:
          httpGet:
            path: /api/v1/health/live
            port: http
            httpHeaders:
            - name: User-Agent
              value: "k8s-liveness-probe"
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /api/v1/health/ready
            port: http
            httpHeaders:
            - name: User-Agent
              value: "k8s-readiness-probe"
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        
        startupProbe:
          httpGet:
            path: /api/v1/health/startup
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 10
        
        # Volume mounts for temporary storage
        volumeMounts:
        - name: tmp-volume
          mountPath: /tmp
        - name: prometheus-metrics
          mountPath: /tmp/prometheus
        - name: app-logs
          mountPath: /app/logs
      
      # Volumes for temporary storage
      volumes:
      - name: tmp-volume
        emptyDir:
          sizeLimit: 100Mi
      - name: prometheus-metrics
        emptyDir:
          sizeLimit: 100Mi
      - name: app-logs
        emptyDir:
          sizeLimit: 500Mi
      
      # Pod disruption and scheduling
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - scout-backend
              topologyKey: kubernetes.io/hostname
      
      tolerations:
      - key: "node.kubernetes.io/not-ready"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300
      - key: "node.kubernetes.io/unreachable"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300

---
# Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: scout-backend-hpa
  namespace: scout-platform
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: scout-backend
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 60

---
# Pod Disruption Budget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: scout-backend-pdb
  namespace: scout-platform
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: scout-backend

---
# Service Account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: scout-backend-sa
  namespace: scout-platform
  labels:
    app: scout-backend
automountServiceAccountToken: false

---
# Service
apiVersion: v1
kind: Service
metadata:
  name: scout-backend-service
  namespace: scout-platform
  labels:
    app: scout-backend
    component: backend
  annotations:
    service.beta.kubernetes.io/azure-load-balancer-backend-protocol: "tcp"
    prometheus.io/scrape: "true"
    prometheus.io/port: "8000"
spec:
  type: ClusterIP
  selector:
    app: scout-backend
  ports:
  - name: http
    protocol: TCP
    port: 80
    targetPort: http
  - name: metrics
    protocol: TCP
    port: 9090
    targetPort: metrics

---
# Network Policy
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: scout-backend-network-policy
  namespace: scout-platform
spec:
  podSelector:
    matchLabels:
      app: scout-backend
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: scout-platform
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 8000
  egress:
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
  - to: []
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 5432
    - protocol: TCP
      port: 6379

---
# Ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: scout-backend-ingress
  namespace: scout-platform
  labels:
    app: scout-backend
  annotations:
    kubernetes.io/ingress.class: "azure/application-gateway"
    appgw.ingress.kubernetes.io/ssl-redirect: "true"
    appgw.ingress.kubernetes.io/request-timeout: "30"
    appgw.ingress.kubernetes.io/connection-draining: "true"
    appgw.ingress.kubernetes.io/connection-draining-timeout: "30"
    appgw.ingress.kubernetes.io/backend-path-prefix: "/"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
spec:
  tls:
  - hosts:
    - api.scout-platform.com
    secretName: scout-platform-tls
  rules:
  - host: api.scout-platform.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: scout-backend-service
            port:
              name: http